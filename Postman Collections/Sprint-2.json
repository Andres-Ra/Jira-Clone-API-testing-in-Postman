{
	"info": {
		"_postman_id": "f94a71d7-8d62-498d-be2b-8682fe29f47c",
		"name": "AndresRaev_jira_clone_comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Get authentication token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "54e41e1c-3503-4ff7-bade-516fc12cb36e",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"token\", jsonData.authToken);\r",
									"\r",
									"pm.test(\"Retrieving project information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "59ffa0a4-a7f0-46df-abee-4690241e6558",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": "{{base_url}}/authentication/guest"
					},
					"response": []
				},
				{
					"name": "Get project id into variable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"project_id\", jsonData.project.id);\r",
									"pm.globals.set(\"user_id1\", jsonData.project.users[0].id);\r",
									"pm.globals.set(\"user_id2\", jsonData.project.users[1].id);\r",
									"pm.globals.set(\"user_id3\", jsonData.project.users[2].id);\r",
									"\r",
									"pm.test(\"Retrieving project information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "8def2f3d-099f-4397-82d9-cb24db7c3852"
							}
						}
					],
					"id": "8728a3f3-ad1b-4a87-ae25-13e7cfe5a49f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/project"
					},
					"response": []
				},
				{
					"name": "Get current user id into variable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.globals.set(\"current_user_id\", jsonData.currentUser.id);\r",
									"\r",
									"pm.test(\"Retrieving user information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "07ca328f-9caf-4237-959a-50664de6c1d2"
							}
						}
					],
					"id": "01dd66f2-a0dc-41bb-b244-9487a1d53df5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/currentUser"
					},
					"response": []
				}
			],
			"id": "f53761a5-ff3f-442f-9d1f-06506888e49d",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "eab6b3b2-ede3-4107-9168-ed22fe929ab2"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "0f0b5c83-8d1d-4e48-a738-49a9fa627dcb"
					}
				}
			]
		},
		{
			"name": "Create Comments",
			"item": [
				{
					"name": "Create an issue (prerequisite)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1526515b-2c65-451e-aa1f-eb113887f55d",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id); // Savint issue_id as a global variable\r",
									"pm.globals.set(\"title\", jsonData.issue.title); // Saving title as a global variable\r",
									"pm.globals.set(\"description\", jsonData.issue.description); // Saving description as a global variable\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Using the built-in variables \"$randomAdjective\" for the title and \"$randomLoremSentence\" for the description\r",
									"pm.test(\"Check that information is retrieved correctly when using variables\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(pm.globals.get('title')); // Title from saved global variable\r",
									"    pm.expect(jsonData.issue.description).to.eql(pm.globals.get('description')); // Description from  saved global variable\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"bug\");\r",
									"    pm.expect(jsonData.issue.status).to.eq(\"selected\");\r",
									"    pm.expect(jsonData.issue.priority).to.eq(\"3\");\r",
									"    pm.expect(jsonData.issue.reporterId).to.eql(pm.globals.get('user_id2')); //Baby Yoda from a global variable\r",
									"    pm.expect(jsonData.issue.projectId).to.eql(pm.globals.get('project_id'));\r",
									"    pm.expect(jsonData.issue.users[0].id).to.eql(pm.globals.get('user_id1')); //Pickle Rick id from global variable\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d6c19385-9bdd-4fd3-8df6-30735b5cfe98",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"bug\",\r\n    \"title\": \"{{$randomAdjective}}\", // Using built in random adjective\r\n    \"description\": \"{{$randomLoremSentence}}\", // Using built in random Lorem Sentence\r\n    \"reporterId\": {{user_id2}}, //Baby Yoda from global variable\r\n    \"priority\": \"3\",\r\n    \"status\": \"selected\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}} //Pickle Rick from global variable\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/issues"
					},
					"response": []
				},
				{
					"name": "Add a comment 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "67d0f765-321d-4bec-8c9d-bcdb5736968b",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"comment_1_text\", jsonData.comment.body); // Saving comments text as a global variable\r",
									"pm.globals.set(\"comment_1_id\", jsonData.comment.id); // Saving comments id as a global variable\r",
									"\r",
									"pm.test(\"Comment creation was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information is retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.comment.id).to.eql(pm.globals.get('comment_1_id'));\r",
									"    pm.expect(jsonData.comment.body).to.eql(pm.globals.get('comment_1_text')); //\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0ff37941-283b-4ec5-bd5d-091ecf68e92f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"Add comment 1\",\r\n    \"userId\": {{user_id1}},\r\n    \"issueId\": {{issue_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/comments"
					},
					"response": []
				},
				{
					"name": "Add a comment 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1526515b-2c65-451e-aa1f-eb113887f55d",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"comment_2_text\", jsonData.comment.body); // Saving comments text as a global variable\r",
									"pm.globals.set(\"comment_2_id\", jsonData.comment.id); // Saving comments id as a global variable\r",
									"\r",
									"pm.test(\"Comment creation was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information is retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.comment.id).to.eql(pm.globals.get('comment_2_id'));\r",
									"    pm.expect(jsonData.comment.body).to.eql(pm.globals.get('comment_2_text')); //\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9fea11e4-2881-4fa2-8271-2d9613ab2f84",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"Add comment 2\",\r\n    \"userId\": {{user_id1}},\r\n    \"issueId\": {{issue_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/comments"
					},
					"response": []
				},
				{
					"name": "Comments are visible",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1526515b-2c65-451e-aa1f-eb113887f55d",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Comment creation was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// This will check from the array of the object with the comments id and value from global variable, if it's available then it will returns true, otherwise returns false.\r",
									"\r",
									"pm.test(\"The information is retrieved correctly (both comments are visible)\", function () {\r",
									"    pm.expect(_isContains(jsonData.issue.comments, \"id\" , pm.globals.get('comment_1_id'))).to.be.true;\r",
									"    pm.expect(_isContains(jsonData.issue.comments, \"body\" , pm.globals.get('comment_1_text'))).to.be.true;\r",
									"    pm.expect(_isContains(jsonData.issue.comments, \"id\", pm.globals.get('comment_2_id'))).to.be.true;\r",
									"    pm.expect(_isContains(jsonData.issue.comments, \"body\" , pm.globals.get('comment_2_text'))).to.be.true;\r",
									"});\r",
									"\r",
									"// The function _isContains checks the value and key name for the each object from the array.\r",
									"\r",
									"function _isContains(json, keyname, value) {\r",
									" return Object.keys(json).some(key => {\r",
									"        return typeof json[key] === 'object' ? \r",
									"        _isContains(json[key], keyname, value) : key === keyname && json[key] === value;\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "75e4619a-6926-4982-9560-7c983a97c6f3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d2b76811-cc2b-433e-bda0-d7148bd0cca2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/issues/{{issue_id}}"
					},
					"response": []
				},
				{
					"name": "Add a comment (missing required fields)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1526515b-2c65-451e-aa1f-eb113887f55d",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"const errorMessage = \"There were validation errors.\";\r",
									"const errorBody = \"This field is required\";\r",
									"\r",
									"pm.test(\"Comment creation was un-successful\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that correct error messages is recieved\", function () {\r",
									"    pm.expect(jsonData.error.message).to.eql(errorMessage);\r",
									"    pm.expect(jsonData.error.data.fields.body).to.eql(errorBody);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "00887b4e-3ca8-4d50-9d74-78e8b31cd16e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/comments"
					},
					"response": []
				},
				{
					"name": "Add a comment (special characters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1526515b-2c65-451e-aa1f-eb113887f55d",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"comment_3_text\", jsonData.comment.body); // Saving comments text as a global variable\r",
									"\r",
									"\r",
									"pm.test(\"Comment creation was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that correct error messages is recieved\", function () {\r",
									"    pm.expect(jsonData.comment.body).to.eql(pm.globals.get('comment_3_text'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "63b8d42d-1fed-4b3d-8cd0-6344802a67ee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"{{$randomCurrencySymbol}}{{$randomCurrencySymbol}}#¤%&@£$€€€!@#$%&*()^_+=`~Привет Мир!\",\r\n    \"userId\": {{user_id1}},\r\n    \"issueId\": {{issue_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/comments"
					},
					"response": []
				}
			],
			"id": "25c77dae-49cd-462e-8c60-b4d2d3a68f0e"
		},
		{
			"name": "Update Comments",
			"item": [
				{
					"name": "Add a comment (prerequisite)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1526515b-2c65-451e-aa1f-eb113887f55d",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"comment_3_text\", jsonData.comment.body); // Saving comments text as a global variable\r",
									"pm.globals.set(\"comment_3_id\", jsonData.comment.id); // Saving comments id as a global variable\r",
									"\r",
									"pm.test(\"Comment creation was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information is retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.comment.id).to.eql(pm.globals.get('comment_3_id'));\r",
									"    pm.expect(jsonData.comment.body).to.eql(pm.globals.get('comment_3_text')); //\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f6fb809d-3667-4b1d-81cb-d8fd938a0956",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"Add comment 3 - updated later\",\r\n    \"userId\": {{user_id1}},\r\n    \"issueId\": {{issue_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/comments"
					},
					"response": []
				},
				{
					"name": "Update comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1526515b-2c65-451e-aa1f-eb113887f55d",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"comment_3_updated\", jsonData.comment.body); // Saving comments text as a global variable\r",
									"\r",
									"pm.test(\"Comment updating was successful - correct status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information is retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.comment.id).to.eql(pm.globals.get('comment_3_id'));\r",
									"    pm.expect(jsonData.comment.body).to.eql(pm.globals.get('comment_3_updated')); //\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b83fe976-8c31-455d-8b93-e259de9d57ce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"Add comment 3 - added update\",\r\n    \"userId\": {{user_id1}},\r\n    \"issueId\": {{issue_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/comments/{{comment_3_id}}"
					},
					"response": []
				},
				{
					"name": "Update comment (body is null)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1526515b-2c65-451e-aa1f-eb113887f55d",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"const errorMessage = \"There were validation errors.\";\r",
									"const errorCode = \"BAD_USER_INPUT\";\r",
									"const errorBody = \"This field is required\"\r",
									"\r",
									"pm.test(\"Updating comment was unsuccessful - correct status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that correct error message is presented\", function () {\r",
									"    pm.expect(jsonData.error.message).to.eql(errorMessage);\r",
									"    pm.expect(jsonData.error.code).to.eql(errorCode);\r",
									"    pm.expect(jsonData.error.data.fields.body).to.eql(errorBody);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8b51e501-8841-4243-a8f7-932e98f11e4d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/comments/{{comment_3_id}}"
					},
					"response": []
				},
				{
					"name": "Delete comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1526515b-2c65-451e-aa1f-eb113887f55d",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Comment was deleted successfully - correct status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "01392da1-d482-4233-a93c-5d882549b76e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/comments/{{comment_3_id}}"
					},
					"response": []
				},
				{
					"name": "Update deleted comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1526515b-2c65-451e-aa1f-eb113887f55d",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"const errorMessage = \"Comment not found.\";\r",
									"const errorCode = \"ENTITY_NOT_FOUND\";\r",
									"\r",
									"pm.test(\"Updating comment was unsuccessful - correct status\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that correct error message is presented\", function () {\r",
									"    pm.expect(jsonData.error.message).to.eql(errorMessage);\r",
									"    pm.expect(jsonData.error.code).to.eql(errorCode);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d2880663-2a38-4a52-af5f-c7b5d1a538d0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"Add comment 3 - added update\",\r\n    \"userId\": {{user_id1}},\r\n    \"issueId\": {{issue_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/comments/{{comment_3_id}}"
					},
					"response": []
				},
				{
					"name": "Check that comment is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1526515b-2c65-451e-aa1f-eb113887f55d",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Correct status is presented\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The information is retrieved correctly (comment 3 is not in array and deleted)\", function () {\r",
									"    pm.expect(_isContains(jsonData.issue.comments, \"id\" , pm.globals.get('comment_3_id'))).to.be.false;\r",
									"});\r",
									"\r",
									"// The function _isContains checks the value and key name for the each object from the array.\r",
									"\r",
									"function _isContains(json, keyname, value) {\r",
									" return Object.keys(json).some(key => {\r",
									"        return typeof json[key] === 'object' ? \r",
									"        _isContains(json[key], keyname, value) : key === keyname && json[key] === value;\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e684a3da-cd0f-4c85-bf5a-58e6a1847040",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/issues/{{issue_id}}"
					},
					"response": []
				}
			],
			"id": "781e4c8d-639f-40ce-9bd3-248c1d09ed6c"
		},
		{
			"name": "Delete comments",
			"item": [
				{
					"name": "Add a comment (prerequisite)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1526515b-2c65-451e-aa1f-eb113887f55d",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"comment_4_text\", jsonData.comment.body); // Saving comments text as a global variable\r",
									"pm.globals.set(\"comment_4_id\", jsonData.comment.id); // Saving comments id as a global variable\r",
									"\r",
									"pm.test(\"Comment creation was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information is retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.comment.id).to.eql(pm.globals.get('comment_4_id'));\r",
									"    pm.expect(jsonData.comment.body).to.eql(pm.globals.get('comment_4_text')); //\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4f0b5889-6bcf-4968-8358-4ecb292a471c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"Add comment 3 - updated later\",\r\n    \"userId\": {{user_id1}},\r\n    \"issueId\": {{issue_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/comments"
					},
					"response": []
				},
				{
					"name": "Delete comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1526515b-2c65-451e-aa1f-eb113887f55d",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Comment was deleted successfully - correct status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2153e984-373d-4a5d-97ee-7174cb360302",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/comments/{{comment_4_id}}"
					},
					"response": []
				},
				{
					"name": "Update deleted comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1526515b-2c65-451e-aa1f-eb113887f55d",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"const errorMessage = \"Comment not found.\";\r",
									"const errorCode = \"ENTITY_NOT_FOUND\";\r",
									"\r",
									"pm.test(\"Updating comment was unsuccessful - correct status\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that correct error message is presented\", function () {\r",
									"    pm.expect(jsonData.error.message).to.eql(errorMessage);\r",
									"    pm.expect(jsonData.error.code).to.eql(errorCode);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c693b06a-3d6d-40db-9483-9ffa4b473194",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"Add comment 3 - added update\",\r\n    \"userId\": {{user_id1}},\r\n    \"issueId\": {{issue_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/comments/{{comment_3_id}}"
					},
					"response": []
				},
				{
					"name": "Check that comment is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1526515b-2c65-451e-aa1f-eb113887f55d",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Correct status is presented\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The information is retrieved correctly (comment 3 is not in array and deleted)\", function () {\r",
									"    pm.expect(_isContains(jsonData.issue.comments, \"id\" , pm.globals.get('comment_3_id'))).to.be.false;\r",
									"});\r",
									"\r",
									"// The function _isContains checks the value and key name for the each object from the array.\r",
									"\r",
									"function _isContains(json, keyname, value) {\r",
									" return Object.keys(json).some(key => {\r",
									"        return typeof json[key] === 'object' ? \r",
									"        _isContains(json[key], keyname, value) : key === keyname && json[key] === value;\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7e4e59f0-afd8-40e3-b282-ec1031bc0004",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/issues/{{issue_id}}"
					},
					"response": []
				}
			],
			"id": "52d4c05a-4842-493b-9d64-6febad9367d0"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{token}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "1a910a68-d914-40b7-a1b7-e1e3c8881819",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "cdcdcb05-fdca-40cf-9228-3954119f0578",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}